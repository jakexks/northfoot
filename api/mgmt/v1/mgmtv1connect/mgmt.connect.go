// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/mgmt/v1/mgmt.proto

package mgmtv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jakexks/northfoot/api/mgmt/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "api.mgmt.v1.ManagementService"
)

// ManagementServiceClient is a client for the api.mgmt.v1.ManagementService service.
type ManagementServiceClient interface {
	GetSigner(context.Context, *connect_go.Request[v1.GetSignerRequest]) (*connect_go.Response[v1.GetSignerResponse], error)
	ListSigners(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSignersResponse], error)
	CreateSigner(context.Context, *connect_go.Request[v1.CreateSignerRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteSigner(context.Context, *connect_go.Request[v1.DeleteSignerRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewManagementServiceClient constructs a client for the api.mgmt.v1.ManagementService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementServiceClient{
		getSigner: connect_go.NewClient[v1.GetSignerRequest, v1.GetSignerResponse](
			httpClient,
			baseURL+"/api.mgmt.v1.ManagementService/GetSigner",
			opts...,
		),
		listSigners: connect_go.NewClient[emptypb.Empty, v1.ListSignersResponse](
			httpClient,
			baseURL+"/api.mgmt.v1.ManagementService/ListSigners",
			opts...,
		),
		createSigner: connect_go.NewClient[v1.CreateSignerRequest, emptypb.Empty](
			httpClient,
			baseURL+"/api.mgmt.v1.ManagementService/CreateSigner",
			opts...,
		),
		deleteSigner: connect_go.NewClient[v1.DeleteSignerRequest, emptypb.Empty](
			httpClient,
			baseURL+"/api.mgmt.v1.ManagementService/DeleteSigner",
			opts...,
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	getSigner    *connect_go.Client[v1.GetSignerRequest, v1.GetSignerResponse]
	listSigners  *connect_go.Client[emptypb.Empty, v1.ListSignersResponse]
	createSigner *connect_go.Client[v1.CreateSignerRequest, emptypb.Empty]
	deleteSigner *connect_go.Client[v1.DeleteSignerRequest, emptypb.Empty]
}

// GetSigner calls api.mgmt.v1.ManagementService.GetSigner.
func (c *managementServiceClient) GetSigner(ctx context.Context, req *connect_go.Request[v1.GetSignerRequest]) (*connect_go.Response[v1.GetSignerResponse], error) {
	return c.getSigner.CallUnary(ctx, req)
}

// ListSigners calls api.mgmt.v1.ManagementService.ListSigners.
func (c *managementServiceClient) ListSigners(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSignersResponse], error) {
	return c.listSigners.CallUnary(ctx, req)
}

// CreateSigner calls api.mgmt.v1.ManagementService.CreateSigner.
func (c *managementServiceClient) CreateSigner(ctx context.Context, req *connect_go.Request[v1.CreateSignerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.createSigner.CallUnary(ctx, req)
}

// DeleteSigner calls api.mgmt.v1.ManagementService.DeleteSigner.
func (c *managementServiceClient) DeleteSigner(ctx context.Context, req *connect_go.Request[v1.DeleteSignerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteSigner.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the api.mgmt.v1.ManagementService service.
type ManagementServiceHandler interface {
	GetSigner(context.Context, *connect_go.Request[v1.GetSignerRequest]) (*connect_go.Response[v1.GetSignerResponse], error)
	ListSigners(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSignersResponse], error)
	CreateSigner(context.Context, *connect_go.Request[v1.CreateSignerRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteSigner(context.Context, *connect_go.Request[v1.DeleteSignerRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.mgmt.v1.ManagementService/GetSigner", connect_go.NewUnaryHandler(
		"/api.mgmt.v1.ManagementService/GetSigner",
		svc.GetSigner,
		opts...,
	))
	mux.Handle("/api.mgmt.v1.ManagementService/ListSigners", connect_go.NewUnaryHandler(
		"/api.mgmt.v1.ManagementService/ListSigners",
		svc.ListSigners,
		opts...,
	))
	mux.Handle("/api.mgmt.v1.ManagementService/CreateSigner", connect_go.NewUnaryHandler(
		"/api.mgmt.v1.ManagementService/CreateSigner",
		svc.CreateSigner,
		opts...,
	))
	mux.Handle("/api.mgmt.v1.ManagementService/DeleteSigner", connect_go.NewUnaryHandler(
		"/api.mgmt.v1.ManagementService/DeleteSigner",
		svc.DeleteSigner,
		opts...,
	))
	return "/api.mgmt.v1.ManagementService/", mux
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) GetSigner(context.Context, *connect_go.Request[v1.GetSignerRequest]) (*connect_go.Response[v1.GetSignerResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.mgmt.v1.ManagementService.GetSigner is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListSigners(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ListSignersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.mgmt.v1.ManagementService.ListSigners is not implemented"))
}

func (UnimplementedManagementServiceHandler) CreateSigner(context.Context, *connect_go.Request[v1.CreateSignerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.mgmt.v1.ManagementService.CreateSigner is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteSigner(context.Context, *connect_go.Request[v1.DeleteSignerRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.mgmt.v1.ManagementService.DeleteSigner is not implemented"))
}
