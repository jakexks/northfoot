// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/sign/v1/sign.proto

package signv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jakexks/northfoot/api/sign/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SignServiceName is the fully-qualified name of the SignService service.
	SignServiceName = "api.sign.v1.SignService"
)

// SignServiceClient is a client for the api.sign.v1.SignService service.
type SignServiceClient interface {
	Sign(context.Context, *connect_go.Request[v1.SignRequest]) (*connect_go.Response[v1.SignResponse], error)
	TrustBundle(context.Context, *connect_go.Request[v1.TrustBundleRequest]) (*connect_go.Response[v1.TrustBundleResponse], error)
}

// NewSignServiceClient constructs a client for the api.sign.v1.SignService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSignServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SignServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &signServiceClient{
		sign: connect_go.NewClient[v1.SignRequest, v1.SignResponse](
			httpClient,
			baseURL+"/api.sign.v1.SignService/Sign",
			opts...,
		),
		trustBundle: connect_go.NewClient[v1.TrustBundleRequest, v1.TrustBundleResponse](
			httpClient,
			baseURL+"/api.sign.v1.SignService/TrustBundle",
			opts...,
		),
	}
}

// signServiceClient implements SignServiceClient.
type signServiceClient struct {
	sign        *connect_go.Client[v1.SignRequest, v1.SignResponse]
	trustBundle *connect_go.Client[v1.TrustBundleRequest, v1.TrustBundleResponse]
}

// Sign calls api.sign.v1.SignService.Sign.
func (c *signServiceClient) Sign(ctx context.Context, req *connect_go.Request[v1.SignRequest]) (*connect_go.Response[v1.SignResponse], error) {
	return c.sign.CallUnary(ctx, req)
}

// TrustBundle calls api.sign.v1.SignService.TrustBundle.
func (c *signServiceClient) TrustBundle(ctx context.Context, req *connect_go.Request[v1.TrustBundleRequest]) (*connect_go.Response[v1.TrustBundleResponse], error) {
	return c.trustBundle.CallUnary(ctx, req)
}

// SignServiceHandler is an implementation of the api.sign.v1.SignService service.
type SignServiceHandler interface {
	Sign(context.Context, *connect_go.Request[v1.SignRequest]) (*connect_go.Response[v1.SignResponse], error)
	TrustBundle(context.Context, *connect_go.Request[v1.TrustBundleRequest]) (*connect_go.Response[v1.TrustBundleResponse], error)
}

// NewSignServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSignServiceHandler(svc SignServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/api.sign.v1.SignService/Sign", connect_go.NewUnaryHandler(
		"/api.sign.v1.SignService/Sign",
		svc.Sign,
		opts...,
	))
	mux.Handle("/api.sign.v1.SignService/TrustBundle", connect_go.NewUnaryHandler(
		"/api.sign.v1.SignService/TrustBundle",
		svc.TrustBundle,
		opts...,
	))
	return "/api.sign.v1.SignService/", mux
}

// UnimplementedSignServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSignServiceHandler struct{}

func (UnimplementedSignServiceHandler) Sign(context.Context, *connect_go.Request[v1.SignRequest]) (*connect_go.Response[v1.SignResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.sign.v1.SignService.Sign is not implemented"))
}

func (UnimplementedSignServiceHandler) TrustBundle(context.Context, *connect_go.Request[v1.TrustBundleRequest]) (*connect_go.Response[v1.TrustBundleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("api.sign.v1.SignService.TrustBundle is not implemented"))
}
